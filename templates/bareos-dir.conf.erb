# DO NOT EDIT - Managed by Puppet
#
# Bacula Director Master Configuration
#   for <%= @director_server_real %>

# Define the name of this director so other clients can
# connect to it and work with our system
Director {
  Name = "<%= @director_server_real -%>:director"
  Query File = "/etc/bareos/scripts/query.sql"
  Working Directory = "/var/lib/bareos"
  PID Directory = "/var/lib/bareos"
<% if @plugin_dir -%>
  Plugin Directory = <%= @plugin_dir %>
<% end -%>
  Maximum Concurrent Jobs = 5
  Password = "<%= @director_password -%>"
  Messages = "<%= @director_server_real -%>:messages:daemon"
<% if @use_tls -%>
  TLS Enable = yes
  TLS Require = <%= @tls_require %>
  TLS Verify Peer = <%= @tls_verify_peer %>
<% @tls_allowed_cn.each do |allowed_cn| -%>
  TLS Allowed CN = "<%= @allowed_cn %>"
<% end -%>
<% if @tls_ca_cert -%>
  TLS CA Certificate File = <%= @tls_ca_cert %>
<% end -%>
<% if @tls_ca_cert_dir -%>
  TLS CA Certificate Dir = <%= @tls_ca_cert_dir %>
<% end -%>
  TLS Certificate = <%= @tls_cert %>
  TLS Key = <%= @tls_key %>
<% end -%>
}

# This is where the catalog information will be stored (basically
# this should be how to connect to whatever database we're using)
Catalog {
  Name = "<%= @director_server_real -%>:<%= @db_backend -%>"
  dbname = "<%= @db_database -%>"; dbdriver = <%= @db_backend %>
  <% if @db_backend == 'mysql' # postgres and sqlite don't require these settings -%>
  dbaddress = <%= @db_host %>; dbport = <%= @db_port %>; user = <%= @db_user %>; password = <%= @db_password %>
  <% end -%>
}

<% if @use_console -%>
# Restricted console used by tray-monitor to get the status of the director
Console {
  Name = "<%= @director_server_real -%>:monitor:director"
  Password = "<%= @console_password -%>"
  CommandACL = status, .status
}
<% end -%>

# DEFAULT STORAGE SERVER ------------------------------------------------------
# All the clients will define their own Storage Daemon configuration as they
# will connect to a dedicated File device on that director (to aid Pool & Volume
# management along with concurrent access). This section will define a default
# Storage Daemon to connect to (using the standard FileStorage device) and a
# Pool which will be used with that as well.
Storage {
  Name = "<%= @storage_server_real -%>:storage:default"
  Address = <%= @storage_server_real %>
  Password = "<%= @director_password -%>"
  Device = "DefaultFileStorage"
  Media Type = File
<% if @use_tls -%>
  TLS Enable = yes
  TLS Require = <%= @tls_require %>
<% if @tls_ca_cert -%>
  TLS CA Certificate File = <%= @tls_ca_cert %>
<% end -%>
<% if @tls_ca_cert_dir -%>
  TLS CA Certificate Dir = <%= @tls_ca_cert_dir %>
<% end -%>
  TLS Certificate = <%= @tls_cert %>
  TLS Key = <%= @tls_key %>
<% end -%>
}

# Create a Counter which will be used to label the catalog volumes on the system
Counter {
  Name    = "Counter<%= @director_server_real.split('.')[0].capitalize -%>Catalog"
  Minimum = 1
  Catalog = "<%= @director_server_real -%>:<%= @db_backend %>"
}

# FILE SETS -------------------------------------------------------------------
# Define the standard set of locations which which will be backed up (along
# what within those should not be). In general, we have two types:
#
#   Basic:noHome     This doesn't back up the /home directory as its mounted
#                    from an NFS director on the network (this is the default).
#   Basic:withHome   This one does for servers where we don't mount NFS on it.

# JOB DEFINITIONS -------------------------------------------------------------
# Create the types of jobs we need to run.

<% if @backup_catalog -%>
# Backup the catalog database (after the nightly save)
Job {
  Name = "BackupCatalog"
  Type = Backup
  Client = <%= @director_server_real %>
  FileSet="Catalog"
  Schedule = "WeeklyCycleAfterBackup"
  Storage = "<%= @storage_server_real -%>:storage:default"
  Messages = "<%= @director_server_real -%>:messages:standard"
  Pool = "<%= @storage_server_real -%>:pool:catalog"
  # This creates an ASCII copy of the catalog
  RunBeforeJob = "/usr/lib/bareos/scripts/make_catalog_backup.pl <%= @director_server_real -%>:<%= @db_backend -%>"
  # This deletes the copy of the catalog
  RunAfterJob  = "/usr/lib/bareos/scripts/delete_catalog_backup"
  Write Bootstrap = "/var/lib/bareos/BackupCatalog.bsr"
  # Run after main backup
  Priority = 50
# This doesn't seem to be working correctly removing it.
#  RunScript {
#   RunsWhen=After
#   RunsOnClient=No
#   Console = "purge volume action=all allpools storage=File"
#  }
}
<% end -%>

# Finally, bring in all the additional pieces of configuration from the
# different servers for which this Director was configured to manage
@|"sh -c 'for f in /etc/bareos/bareos-dir.d/*.conf ; do echo @${f} ; done'"
